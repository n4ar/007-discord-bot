// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../events
//   index.d.ts

import type { EventEmitter } from "events";
import type { Player, Plugin } from "liliaclient";

declare module "liliaclient" {
    interface Player {
        queue: Queue;
    }
    interface Manager {
        on(event: "trackStart", listener: (queue: Queue, song: Song) => void): this;
        once(event: "trackStart", listener: (queue: Queue, song: Song) => void): this;
        on(event: "trackEnd", listener: (queue: Queue, song: Song) => void): this;
        once(event: "trackEnd", listener: (queue: Queue, song: Song) => void): this;
        on(event: "queueFinished", listener: (queue: Queue) => void): this;
        once(event: "queueFinished", listener: (queue: Queue) => void): this;
    }
}

export class Queue extends EventEmitter {
    readonly tracks: Song[];
    readonly player: Player;
    previous: Song[];
    started: boolean;
    current?: Song;
    length: number;
    constructor(player: Player);
    get loopType(): "song" | "queue" | undefined;
    skip(): Promise<Song | undefined>;
    start(): Promise<boolean>;
    add(songs: Addable | Array<Addable>, requester?: string | Record<string, any>): number;
    emit(event: string, ...args: any[]): boolean;
    loop(type: "queue" | "song"): Queue;
    sort(predicate?: (a: Song, b: Song) => number): Array<Song>;
    shuffle(): void;
}

export type Addable = string | Record<string, any> | Song;

export class Song implements TrackInfo {
    track: string;
    requester?: string;
    length: number;
    identifier: string;
    author: string;
    isStream: boolean;
    position: number;
    title: string;
    uri: string;
    constructor(track: string, requester?: string);
}
export interface TrackInfo {
    length: number;
    identifier: string;
    author: string;
    isStream: boolean;
    position: number;
    title: string;
    uri: string;
}

export class QueuePlugin extends Plugin {
    queue: typeof Queue;
    constructor(queue?: typeof Queue);
    init(): typeof Player;
}

